#!/usr/bin/env python3
"""
–¢–µ—Å—Ç sparse segmentation —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
"""

import sys
import os
import numpy as np
from pathlib import Path
import time
import tempfile
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

def test_sparse_segmentation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç sparse segmentation"""
    print("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ sparse segmentation...")
    
    try:
        from utils.sparse_segmentation import (
            create_sparse_segmentation, 
            interpolate_masks_between_slices,
            adaptive_slice_selection
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–º
        print("   –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä–µ–º–∞...")
        z, y, x = 100, 256, 256  # –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–º —Å –∏–∑–º–µ–Ω—è—é—â–µ–π—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        volume = np.random.randn(z, y, x).astype(np.float32)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç—Å—è –ø–æ Z
        for i in range(z):
            # –°–æ–∑–¥–∞–µ–º "–ª–µ–≥–∫–∏–µ" –≤ —Ü–µ–Ω—Ç—Ä–µ
            center_y, center_x = y // 2, x // 2
            radius = 50 + 20 * np.sin(i * 0.1)  # –ú–µ–Ω—è—é—â–∏–π—Å—è —Ä–∞–¥–∏—É—Å
            
            y_coords, x_coords = np.ogrid[:y, :x]
            mask = (y_coords - center_y)**2 + (x_coords - center_x)**2 < radius**2
            volume[i][mask] = -800  # HU –¥–ª—è –ª–µ–≥–∫–∏—Ö
            
            # –î–æ–±–∞–≤–ª—è–µ–º "–∫–æ—Å—Ç–∏" –ø–æ –∫—Ä–∞—è–º
            bone_mask = (y_coords < 20) | (y_coords > y-20) | (x_coords < 20) | (x_coords > x-20)
            volume[i][bone_mask] = 1000  # HU –¥–ª—è –∫–æ—Å—Ç–µ–π
        
        print(f"   –û–±—ä–µ–º: {volume.shape} ({volume.nbytes / 1024**3:.2f} GB)")
        
        # –°–æ–∑–¥–∞–µ–º mock projector
        class MockProjector:
            def _compute_lung_mask_enhanced(self, volume, body_mask):
                # –ü—Ä–æ—Å—Ç–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ª–µ–≥–∫–∏—Ö –ø–æ HU
                return (volume < -500).astype(np.uint8)
            
            def _compute_bone_mask_enhanced(self, volume, body_mask):
                # –ü—Ä–æ—Å—Ç–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ—Å—Ç–µ–π –ø–æ HU
                return (volume > 200).astype(np.uint8)
            
            def _compute_airways_mask(self, volume, lungs, body):
                # –ü—Ä–æ—Å—Ç–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
                return (volume < -900).astype(np.uint8)
        
        # Mock args
        class MockArgs:
            def __init__(self):
                self.separate_bones = True
                self.divide_bones = False
        
        projector = MockProjector()
        args = MockArgs()
        
        # –¢–µ—Å—Ç 1: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–∞–π—Å–æ–≤
        print("\n   –¢–µ—Å—Ç 1: –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–∞–π—Å–æ–≤...")
        selected_indices = adaptive_slice_selection(volume, max_slices=20, min_step=5)
        print(f"   –í—ã–±—Ä–∞–Ω–æ {len(selected_indices)} —Å–ª–∞–π—Å–æ–≤ –∏–∑ {z}: {selected_indices[:10]}...")
        
        # –¢–µ—Å—Ç 2: Sparse segmentation
        print("\n   –¢–µ—Å—Ç 2: Sparse segmentation...")
        start_time = time.time()
        
        masks = create_sparse_segmentation(
            volume, projector, args, 
            slice_step=10, 
            interpolation_method='morphological'
        )
        
        segmentation_time = time.time() - start_time
        print(f"   –í—Ä–µ–º—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {segmentation_time:.2f}s")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏: {list(masks.keys())}")
        for comp_name, mask in masks.items():
            if mask is not None:
                print(f"     {comp_name}: {mask.shape}, {mask.sum()} –≤–æ–∫—Å–µ–ª–µ–π")
        
        # –¢–µ—Å—Ç 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π (–¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞)
        print("\n   –¢–µ—Å—Ç 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        small_volume = volume[:20]  # –ú–∞–ª–µ–Ω—å–∫–∏–π –æ–±—ä–µ–º –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        # Sparse –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –æ–±—ä–µ–º–∞
        start_time = time.time()
        sparse_masks = create_sparse_segmentation(
            small_volume, projector, args, 
            slice_step=5, 
            interpolation_method='morphological'
        )
        sparse_time = time.time() - start_time
        
        print(f"   Sparse segmentation (20 —Å–ª–∞–π—Å–æ–≤): {sparse_time:.2f}s")
        print(f"   –†–∞—Å—Å—á–∏—Ç–∞–Ω–æ —Å–ª–∞–π—Å–æ–≤: {20 // 5 + 1}")
        
        # –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        estimated_full_time = sparse_time * 20 / (20 // 5 + 1)
        speedup = estimated_full_time / sparse_time
        print(f"   –û—Ü–µ–Ω–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è: {speedup:.1f}x")
        
        print("‚úÖ Sparse segmentation —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è sparse segmentation: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_interpolation_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏...")
    
    try:
        from utils.sparse_segmentation import interpolate_masks_between_slices
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        z, y, x = 10, 64, 64
        slice_indices = [0, 3, 6, 9]  # –ö–∞–∂–¥—ã–π 3-–π —Å–ª–∞–π—Å
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Å–∫–∏
        sparse_masks = {
            'test': []
        }
        
        for i, slice_idx in enumerate(slice_indices):
            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å –∫—Ä—É–≥–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ
            mask = np.zeros((y, x), dtype=np.uint8)
            center_y, center_x = y // 2, x // 2
            radius = 20 + i * 2  # –£–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–π—Å—è —Ä–∞–¥–∏—É—Å
            
            y_coords, x_coords = np.ogrid[:y, :x]
            circle_mask = (y_coords - center_y)**2 + (x_coords - center_x)**2 < radius**2
            mask[circle_mask] = 1
            
            sparse_masks['test'].append(mask)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        methods = ['nearest', 'linear', 'morphological']
        
        for method in methods:
            print(f"   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞: {method}")
            start_time = time.time()
            
            full_masks = interpolate_masks_between_slices(
                sparse_masks, (z, y, x), slice_indices, method
            )
            
            interpolation_time = time.time() - start_time
            print(f"     –í—Ä–µ–º—è: {interpolation_time:.3f}s")
            print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {full_masks['test'].shape}, {full_masks['test'].sum()} –≤–æ–∫—Å–µ–ª–µ–π")
        
        print("‚úÖ –¢–µ—Å—Ç –º–µ—Ç–æ–¥–æ–≤ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π")
    print("=" * 70)
    
    # –¢–µ—Å—Ç 1: Sparse segmentation
    sparse_ok = test_sparse_segmentation()
    
    # –¢–µ—Å—Ç 2: –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    interpolation_ok = test_interpolation_methods()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   Sparse segmentation: {'‚úÖ' if sparse_ok else '‚ùå'}")
    print(f"   –ú–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏: {'‚úÖ' if interpolation_ok else '‚ùå'}")
    
    if sparse_ok and interpolation_ok:
        print("\nüéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤")
        print("   - –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–µ–∂–¥—É —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–ª–∞–π—Å–∞–º–∏")
        print("   - –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö DICOM —Å–µ—Ä–∏–π")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π")

if __name__ == "__main__":
    main()
