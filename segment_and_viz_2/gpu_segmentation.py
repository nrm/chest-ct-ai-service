#!/usr/bin/env python3
"""
GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è RadiAssist
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç CuPy –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ GPU
"""

import sys
import os
import numpy as np
from pathlib import Path
import time
import json
from typing import Dict, Optional, Tuple, Any
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è GPU
os.environ.setdefault('OMP_NUM_THREADS','1')
os.environ.setdefault('OPENBLAS_NUM_THREADS','1')
os.environ.setdefault('MKL_NUM_THREADS','1')
os.environ.setdefault('VECLIB_MAXIMUM_THREADS','1')
os.environ.setdefault('NUMEXPR_NUM_THREADS','1')

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

try:
    import cupy as cp
    GPU_AVAILABLE = True
    print("üî• GPU (CuPy) –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError:
    GPU_AVAILABLE = False
    print("‚ö†Ô∏è  GPU (CuPy) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")

try:
    from ct_mip_visualization import CTVisualizer, SegmentationHelper
    from configurable_dual_body_sementation import (
        create_big_body_mask, create_small_body_mask, create_convex_hull_body,
        clean_bone_mask_configurable, clean_lung_artifacts_configurable,
        clean_airways_configurable, separate_bones_configurable,
        build_thoracic_container_from_body_and_bone, remove_small_components
    )
    SEGMENTATION_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  Segmentation modules not available: {e}")
    SEGMENTATION_AVAILABLE = False


class GPUSegmentationProcessor:
    """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    def __init__(self, use_gpu: bool = True):
        self.use_gpu = use_gpu and GPU_AVAILABLE
        self.device = cp if self.use_gpu else np
        
    def to_gpu(self, array: np.ndarray) -> Any:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ GPU"""
        if self.use_gpu:
            return cp.asarray(array)
        return array
    
    def to_cpu(self, array: Any) -> np.ndarray:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ CPU"""
        if self.use_gpu and hasattr(array, 'get'):
            return array.get()
        return array
    
    def gpu_binary_operations(self, mask1: Any, mask2: Any, operation: str) -> Any:
        """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if not self.use_gpu:
            if operation == 'and':
                return mask1 & mask2
            elif operation == 'or':
                return mask1 | mask2
            elif operation == 'not':
                return ~mask1
            return mask1
        
        if operation == 'and':
            return self.device.logical_and(mask1, mask2)
        elif operation == 'or':
            return self.device.logical_or(mask1, mask2)
        elif operation == 'not':
            return self.device.logical_not(mask1)
        return mask1
    
    def gpu_morphology(self, mask: Any, operation: str, footprint_size: int = 3) -> Any:
        """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if not self.use_gpu:
            from skimage.morphology import binary_opening, binary_closing, binary_erosion, binary_dilation
            footprint = np.ones((footprint_size, footprint_size, footprint_size))
            
            if operation == 'opening':
                return binary_opening(mask, footprint=footprint)
            elif operation == 'closing':
                return binary_closing(mask, footprint=footprint)
            elif operation == 'erosion':
                return binary_erosion(mask, footprint=footprint)
            elif operation == 'dilation':
                return binary_dilation(mask, footprint=footprint)
            return mask
        
        # GPU-–≤–µ—Ä—Å–∏—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ CuPy
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏, —Ç–∞–∫ –∫–∞–∫ CuPy –Ω–µ –∏–º–µ–µ—Ç ndimage
        # –ù–æ —É—Å–∫–æ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        cpu_mask = self.to_cpu(mask)
        from skimage.morphology import binary_opening, binary_closing, binary_erosion, binary_dilation
        footprint = np.ones((footprint_size, footprint_size, footprint_size))
        
        if operation == 'opening':
            result = binary_opening(cpu_mask, footprint=footprint)
        elif operation == 'closing':
            result = binary_closing(cpu_mask, footprint=footprint)
        elif operation == 'erosion':
            result = binary_erosion(cpu_mask, footprint=footprint)
        elif operation == 'dilation':
            result = binary_dilation(cpu_mask, footprint=footprint)
        else:
            result = cpu_mask
        
        return self.to_gpu(result)
    
    def gpu_threshold(self, volume: Any, threshold: float) -> Any:
        """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        return volume > threshold
    
    def gpu_connected_components(self, mask: Any) -> Tuple[Any, int]:
        """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"""
        if not self.use_gpu:
            from scipy import ndimage
            labeled, num_components = ndimage.label(mask)
            return labeled, num_components
        
        # GPU-–≤–µ—Ä—Å–∏—è —á–µ—Ä–µ–∑ CuPy
        labeled = cp.asarray(cp.ndimage.label(mask)[0])
        num_components = int(cp.max(labeled))
        return labeled, num_components
    
    def gpu_largest_components(self, mask: Any, n_components: int = 1) -> Any:
        """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"""
        if not self.use_gpu:
            return SegmentationHelper.get_largest_components(mask, n_components)
        
        # GPU-–≤–µ—Ä—Å–∏—è
        labeled, num_components = self.gpu_connected_components(mask)
        
        if num_components == 0:
            return mask
        
        # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        component_sizes = cp.bincount(labeled.ravel())[1:]  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω (0)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if n_components >= num_components:
            largest_indices = cp.arange(1, num_components + 1)
        else:
            largest_indices = cp.argsort(component_sizes)[-n_components:] + 1
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        result_mask = cp.zeros_like(mask, dtype=cp.uint8)
        for idx in largest_indices:
            result_mask[labeled == idx] = 1
        
        return result_mask
    
    def gpu_convex_hull_2d(self, mask_slice: Any) -> Any:
        """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã–ø—É–∫–ª–∞—è –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è 2D —Å—Ä–µ–∑–∞"""
        if not self.use_gpu:
            from skimage.morphology import convex_hull_image
            return convex_hull_image(mask_slice.astype(bool))
        
        # GPU-–≤–µ—Ä—Å–∏—è –≤—ã–ø—É–∫–ª–æ–π –æ–±–æ–ª–æ—á–∫–∏
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–ª–æ–∂–Ω–∞—è –¥–ª—è GPU
        cpu_slice = self.to_cpu(mask_slice)
        from skimage.morphology import convex_hull_image
        hull = convex_hull_image(cpu_slice.astype(bool))
        return self.to_gpu(hull.astype(np.uint8))
    
    def create_gpu_configurable_masks(self, volume: np.ndarray, projector, args, case_name=None) -> Dict[str, np.ndarray]:
        """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã—Ö –º–∞—Å–æ–∫"""
        
        print(f"üî• GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {'–≤–∫–ª—é—á–µ–Ω–∞' if self.use_gpu else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—ä–µ–º –Ω–∞ GPU
        gpu_volume = self.to_gpu(volume)
        masks = {}
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–æ–∫ —Ç–µ–ª–∞ (CPU, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã)
        print("     –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–æ–∫ —Ç–µ–ª–∞...")
        big_body = create_big_body_mask(volume)  # CPU
        small_body = create_small_body_mask(volume)  # CPU
        convex_body = create_convex_hull_body(small_body)  # CPU
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ GPU –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        gpu_big_body = self.to_gpu(big_body)
        gpu_small_body = self.to_gpu(small_body)
        gpu_convex_body = self.to_gpu(convex_body)
        
        masks['body'] = small_body  # –°–æ—Ö—Ä–∞–Ω—è–µ–º CPU –≤–µ—Ä—Å–∏—é
        
        # 2. –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ—Å—Ç–µ–π (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        bone_final = None
        if args.separate_bones:
            print("     –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ—Å—Ç–µ–π...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∫–æ—Å—Ç–µ–π
            bones_big = projector._compute_bone_mask_enhanced(volume, big_body)
            bone_final = clean_bone_mask_configurable(
                (bones_big & convex_body).astype(np.uint8), volume, small_body
            )
            masks['bone'] = bone_final
        
        # 3. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏
        thorax = build_thoracic_container_from_body_and_bone(convex_body, bone_final) if args.separate_bones else convex_body
        gpu_thorax = self.to_gpu(thorax)
        
        # 4. –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ª–µ–≥–∫–∏—Ö (GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        print("     –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ª–µ–≥–∫–∏—Ö...")
        lungs_big = projector._compute_lung_mask_enhanced(volume, big_body)  # CPU
        gpu_lungs_big = self.to_gpu(lungs_big)
        
        # GPU –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ª–µ–≥–∫–∏—Ö
        gpu_lungs_limited = self.gpu_binary_operations(gpu_lungs_big, gpu_thorax, 'and')
        gpu_lungs_limited = gpu_lungs_limited.astype(self.device.uint8)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ CPU –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        lungs_limited = self.to_cpu(gpu_lungs_limited)
        lungs_final = clean_lung_artifacts_configurable(
            lungs_limited, volume, body_mask=small_body, thorax=thorax
        )
        
        # –ê–Ω—Ç–∏-—Å–ø–∏–Ω–∞: –≤—ã—Ä–µ–∑–∞–µ–º –∑–∞–¥–Ω—é—é 8% ¬´—Å–∫–æ—Ä–ª—É–ø—É¬ª
        posterior_cut = int(lungs_final.shape[1] * 0.08)
        lungs_final[:, :posterior_cut, :] = 0
        
        masks['lungs'] = lungs_final
        
        # 5. –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        print("     –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π...")
        airways_big = projector._compute_airways_mask(volume, lungs_big, big_body)  # CPU
        gpu_airways_big = self.to_gpu(airways_big)
        
        gpu_airways_limited = self.gpu_binary_operations(gpu_airways_big, gpu_convex_body, 'and')
        gpu_airways_limited = gpu_airways_limited.astype(self.device.uint8)
        
        airways_limited = self.to_cpu(gpu_airways_limited)
        airways_final = clean_airways_configurable(airways_limited, lungs_final)
        
        # 6. –ú—è–≥–∫–∏–µ —Ç–∫–∞–Ω–∏ (GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        print("     –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –º—è–≥–∫–∏—Ö —Ç–∫–∞–Ω–µ–π...")
        gpu_soft_mask = gpu_small_body.copy()
        gpu_lungs_final = self.to_gpu(lungs_final)
        gpu_airways_final = self.to_gpu(airways_final)
        
        # GPU –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º—è–≥–∫–∏—Ö —Ç–∫–∞–Ω–µ–π
        gpu_soft_mask = self.gpu_binary_operations(gpu_soft_mask, gpu_lungs_final, 'and')
        gpu_soft_mask = self.gpu_binary_operations(gpu_soft_mask, gpu_lungs_final, 'not')
        
        if args.separate_bones and 'bone' in masks:
            gpu_bone_final = self.to_gpu(masks['bone'])
            gpu_soft_mask = self.gpu_binary_operations(gpu_soft_mask, gpu_bone_final, 'and')
            gpu_soft_mask = self.gpu_binary_operations(gpu_soft_mask, gpu_bone_final, 'not')
        
        gpu_soft_mask = self.gpu_binary_operations(gpu_soft_mask, gpu_airways_final, 'and')
        gpu_soft_mask = self.gpu_binary_operations(gpu_soft_mask, gpu_airways_final, 'not')
        
        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞ GPU
        gpu_soft_mask = self.gpu_morphology(gpu_soft_mask, 'opening', 3)
        gpu_soft_mask = gpu_soft_mask.astype(self.device.uint8)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ CPU –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        soft_mask = self.to_cpu(gpu_soft_mask)
        total_vox = int(small_body.sum())
        min_vox = 800 if total_vox < 5_000_000 else 3000
        soft_mask = remove_small_components(soft_mask, min_voxels=min_vox)
        masks['soft'] = soft_mask
        
        # 7. –î–µ–ª–µ–Ω–∏–µ –∫–æ—Å—Ç–µ–π (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if args.separate_bones and args.divide_bones and bone_final is not None:
            print("     –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ—Å—Ç–µ–π...")
            spine_mask, ribs_mask = separate_bones_configurable(bone_final)
            masks['spine'] = spine_mask
            masks['ribs'] = ribs_mask
        
        print(f"‚úÖ GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return masks


def create_gpu_configurable_masks(volume: np.ndarray, projector, args, case_name=None, use_gpu: bool = True) -> Dict[str, np.ndarray]:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º—ã–µ –º–∞—Å–∫–∏ —Å GPU-—É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
    
    Args:
        volume: 3D –º–∞—Å—Å–∏–≤ CT –¥–∞–Ω–Ω—ã—Ö
        projector: –ü—Ä–æ–µ–∫—Ç–æ—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        case_name: –ò–º—è –∫–µ–π—Å–∞
        use_gpu: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –º–∞—Å–∫–∞–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    """
    processor = GPUSegmentationProcessor(use_gpu=use_gpu)
    return processor.create_gpu_configurable_masks(volume, projector, args, case_name)


def process_single_case_gpu(case_name, data_dir, output_dir, args, use_gpu: bool = True):
    """GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–µ–π—Å–∞"""
    
    print(f"üî• GPU –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–µ–π—Å–∞: {case_name}")
    print(f"   GPU: {'–≤–∫–ª—é—á–µ–Ω' if use_gpu else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print(f"1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {case_name}...")
    visualizer = CTVisualizer(data_dir, output_dir)
    visualizer.load_data()
    volume = visualizer.volume
    
    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω HU: [{volume.min():.0f}, {volume.max():.0f}]")
    print(f"   –†–∞–∑–º–µ—Ä: {volume.shape} ({volume.nbytes / 1024**3:.2f} GB)")
    
    # GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    print("\n2. GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è...")
    start_time = time.time()
    
    masks = create_gpu_configurable_masks(volume, visualizer.projector, args, case_name, use_gpu)
    
    segmentation_time = time.time() - start_time
    print(f"   –í—Ä–µ–º—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {segmentation_time:.2f} —Å–µ–∫")
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    analyze_gpu_results(volume, masks, args, case_name, segmentation_time)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
    print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    create_gpu_visualizations(volume, masks, visualizer.metadata, output_dir, args, case_name)
    
    print(f"\nüî• GPU –û–ë–†–ê–ë–û–¢–ö–ê {case_name} –ó–ê–í–ï–†–®–ï–ù–ê!")
    return True


def analyze_gpu_results(volume: np.ndarray, masks: Dict[str, np.ndarray], args, case_name: str, segmentation_time: float):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    print(f"   üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {case_name}:")
    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {segmentation_time:.2f} —Å–µ–∫")
    
    total_voxels = volume.size
    print(f"   üìè –û–±—â–∏–π –æ–±—ä–µ–º: {total_voxels:,} –≤–æ–∫—Å–µ–ª–µ–π")
    
    for comp_name, mask in masks.items():
        if mask is not None and mask.any():
            voxel_count = mask.sum()
            percentage = (voxel_count / total_voxels) * 100
            print(f"   {comp_name:>12}: {voxel_count:>8,} –≤–æ–∫—Å–µ–ª–µ–π ({percentage:>5.1f}%)")
        else:
            print(f"   {comp_name:>12}: {'–Ω–µ –Ω–∞–π–¥–µ–Ω–æ':>8}")


def create_gpu_visualizations(volume: np.ndarray, masks: Dict[str, np.ndarray], metadata: Dict, 
                             output_dir: Path, args, case_name: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    try:
        import matplotlib
        matplotlib.use('Agg')
        import matplotlib.pyplot as plt
        
        # –°–æ–∑–¥–∞–µ–º MIP –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        views = {
            '–ê–∫—Å–∏–∞–ª—å–Ω–∞—è': 0,
            '–ö–æ—Ä–æ–Ω–∞–ª—å–Ω–∞—è': 1,
            '–°–∞–≥–∏—Ç—Ç–∞–ª—å–Ω–∞—è': 2,
        }
        
        available_components = [comp for comp, mask in masks.items() if mask is not None and mask.any()]
        n_components = len(available_components) + 1  # +1 –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        fig, axes = plt.subplots(n_components, 3, figsize=(18, 6 * n_components))
        fig.suptitle(f'üî• GPU –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø: {case_name}', 
                    fontsize=16, fontweight='bold', color='darkred')
        
        # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–º
        for col, (view_name, axis) in enumerate(views.items()):
            if n_components == 1:
                ax = axes[col] if n_components == 1 else axes[0, col]
            else:
                ax = axes[0, col]
            
            # –°–æ–∑–¥–∞–µ–º MIP
            if axis == 0:  # –ê–∫—Å–∏–∞–ª—å–Ω–∞—è
                mip_img = np.max(volume, axis=axis)
            elif axis == 1:  # –ö–æ—Ä–æ–Ω–∞–ª—å–Ω–∞—è
                mip_img = np.max(volume, axis=axis)
            else:  # –°–∞–≥–∏—Ç—Ç–∞–ª—å–Ω–∞—è
                mip_img = np.max(volume, axis=axis)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            mip_img = np.clip(mip_img, -1000, 500)
            mip_img = (mip_img - mip_img.min()) / (mip_img.max() - mip_img.min())
            
            ax.imshow(mip_img, cmap='gray', aspect='auto')
            ax.set_title(f'{view_name} (–∏—Å—Ö–æ–¥–Ω—ã–π)', fontsize=12, fontweight='bold')
            ax.axis('off')
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–µ MIP
        for row, component in enumerate(available_components, 1):
            mask = masks[component]
            
            for col, (view_name, axis) in enumerate(views.items()):
                if n_components == 1:
                    ax = axes[col]
                else:
                    ax = axes[row, col]
                
                # –°–æ–∑–¥–∞–µ–º MIP –º–∞—Å–∫–∏
                if axis == 0:  # –ê–∫—Å–∏–∞–ª—å–Ω–∞—è
                    mip_mask = np.max(mask, axis=axis)
                elif axis == 1:  # –ö–æ—Ä–æ–Ω–∞–ª—å–Ω–∞—è
                    mip_mask = np.max(mask, axis=axis)
                else:  # –°–∞–≥–∏—Ç—Ç–∞–ª—å–Ω–∞—è
                    mip_mask = np.max(mask, axis=axis)
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                if mip_mask.max() > 0:
                    mip_mask = mip_mask.astype(np.float32) / mip_mask.max()
                
                ax.imshow(mip_mask, cmap='hot', aspect='auto', alpha=0.7)
                
                voxel_count = mask.sum()
                title = f'{view_name} ({component})\n{voxel_count:,} –≤–æ–∫—Å–µ–ª–µ–π üî•'
                ax.set_title(title, fontsize=11, color='darkred', fontweight='bold')
                ax.axis('off')
        
        plt.tight_layout()
        out = output_dir / f"{case_name}_gpu_segmentation.png"
        plt.savefig(out, dpi=150, bbox_inches='tight')
        plt.close()
        print(f"   üî• GPU –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: {out.name}")
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")


if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    parser = argparse.ArgumentParser(description='GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è CT')
    parser.add_argument('--data_dir', type=str, required=True, help='–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–µ–π—Å–∞–º–∏')
    parser.add_argument('--case', type=str, default=None, help='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–µ–π—Å–∞')
    parser.add_argument('--separate_bones', action='store_true', help='–í—ã–¥–µ–ª—è—Ç—å –∫–æ—Å—Ç–∏')
    parser.add_argument('--divide_bones', action='store_true', help='–†–∞–∑–¥–µ–ª—è—Ç—å –∫–æ—Å—Ç–∏')
    parser.add_argument('--output_dir', type=str, default=None, help='–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--no_gpu', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å GPU')
    
    args = parser.parse_args()
    
    data_root = Path(args.data_dir)
    if args.output_dir:
        output_dir = Path(args.output_dir)
    else:
        output_dir = Path(__file__).parent / 'gpu_visualizations'
    
    output_dir.mkdir(exist_ok=True)
    
    use_gpu = not args.no_gpu and GPU_AVAILABLE
    
    if args.case:
        case_dir = data_root / args.case
        if case_dir.exists():
            success = process_single_case_gpu(args.case, case_dir, output_dir, args, use_gpu)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£—Å–ø–µ—Ö' if success else '–û—à–∏–±–∫–∞'}")
        else:
            print(f"–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {case_dir}")
    else:
        print("–£–∫–∞–∂–∏—Ç–µ –∫–µ–π—Å —Å --case")
