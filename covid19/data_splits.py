#!/usr/bin/env python3
"""
–†–∞–∑–±–∏–µ–Ω–∏–µ COVID19 –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ–ª–¥—ã –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏.

–®–∞–≥ 3 –∏–∑ –ø–ª–∞–Ω–∞: docs/covid19_implementation_plan.md
"""

import json
import numpy as np
from pathlib import Path
from typing import Dict, List, Tuple
from sklearn.model_selection import StratifiedKFold
from collections import defaultdict


def create_splits(
    file_paths: List[Path],
    labels: np.ndarray,
    n_folds: int = 5,
    holdout_ratio: float = 0.15,
    random_state: int = 42
) -> Dict:
    """
    –°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏.

    Args:
        file_paths: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ NIfTI —Ñ–∞–π–ª–∞–º
        labels: –ú–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ (0=–Ω–æ—Ä–º–∞, 1=–ø–∞—Ç–æ–ª–æ–≥–∏—è)
        n_folds: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ–ª–¥–æ–≤ –¥–ª—è CV
        holdout_ratio: –î–æ–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è hold-out —Ç–µ—Å—Ç–∞
        random_state: Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

    Returns:
        Dict —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
        {
            'holdout': {'file_paths': [...], 'labels': [...]},
            'cv_folds': [
                {
                    'train': {'file_paths': [...], 'labels': [...]},
                    'val': {'file_paths': [...], 'labels': [...]}
                },
                ...
            ],
            'metadata': {
                'n_folds': int,
                'holdout_ratio': float,
                'random_state': int,
                'total_samples': int,
                'class_distribution': {...}
            }
        }
    """
    np.random.seed(random_state)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º paths –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    file_paths_str = [str(p) for p in file_paths]

    # –®–∞–≥ 1: –û—Ç–¥–µ–ª—è–µ–º hold-out set
    n_total = len(file_paths_str)
    n_holdout = int(n_total * holdout_ratio)

    # –°—Ç—Ä–∞—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª—è hold-out
    indices = np.arange(n_total)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º StratifiedShuffleSplit –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
    from sklearn.model_selection import train_test_split

    train_val_indices, holdout_indices = train_test_split(
        indices,
        test_size=holdout_ratio,
        stratify=labels,
        random_state=random_state
    )

    # Hold-out –¥–∞–Ω–Ω—ã–µ
    holdout_data = {
        'file_paths': [file_paths_str[i] for i in holdout_indices],
        'labels': labels[holdout_indices].tolist()
    }

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–∏
    cv_file_paths = [file_paths_str[i] for i in train_val_indices]
    cv_labels = labels[train_val_indices]

    # –®–∞–≥ 2: –°–æ–∑–¥–∞—ë–º k-fold CV splits
    skf = StratifiedKFold(n_splits=n_folds, shuffle=True, random_state=random_state)

    cv_folds = []
    for fold_idx, (train_idx, val_idx) in enumerate(skf.split(cv_file_paths, cv_labels)):
        fold_data = {
            'fold': fold_idx,
            'train': {
                'file_paths': [cv_file_paths[i] for i in train_idx],
                'labels': cv_labels[train_idx].tolist()
            },
            'val': {
                'file_paths': [cv_file_paths[i] for i in val_idx],
                'labels': cv_labels[val_idx].tolist()
            }
        }
        cv_folds.append(fold_data)

    # –®–∞–≥ 3: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    def get_class_distribution(labels_list):
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤."""
        labels_arr = np.array(labels_list)
        n_normal = int((labels_arr == 0).sum())
        n_pathology = int((labels_arr == 1).sum())
        total = len(labels_arr)
        return {
            'normal': n_normal,
            'pathology': n_pathology,
            'total': total,
            'normal_ratio': f"{n_normal/total:.2%}",
            'pathology_ratio': f"{n_pathology/total:.2%}"
        }

    metadata = {
        'n_folds': n_folds,
        'holdout_ratio': holdout_ratio,
        'random_state': random_state,
        'total_samples': n_total,
        'holdout_size': len(holdout_indices),
        'cv_size': len(train_val_indices),
        'distribution': {
            'overall': get_class_distribution(labels),
            'holdout': get_class_distribution(holdout_data['labels']),
            'cv_total': get_class_distribution(cv_labels)
        },
        'cv_folds_distribution': [
            {
                'fold': i,
                'train': get_class_distribution(fold['train']['labels']),
                'val': get_class_distribution(fold['val']['labels'])
            }
            for i, fold in enumerate(cv_folds)
        ]
    }

    return {
        'holdout': holdout_data,
        'cv_folds': cv_folds,
        'metadata': metadata
    }


def save_splits(splits: Dict, output_path: Path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –≤ JSON —Ñ–∞–π–ª.

    Args:
        splits: –†–µ–∑—É–ª—å—Ç–∞—Ç create_splits()
        output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JSON
    """
    output_path.parent.mkdir(parents=True, exist_ok=True)

    with open(output_path, 'w', encoding='utf-8') as f:
        json.dump(splits, f, indent=2, ensure_ascii=False)

    print(f"‚úÖ Splits —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")


def load_splits(splits_path: Path) -> Dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞.

    Args:
        splits_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É

    Returns:
        Dict —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏–∑ create_splits()
    """
    with open(splits_path, 'r', encoding='utf-8') as f:
        splits = json.load(f)

    return splits


def print_splits_summary(splits: Dict):
    """
    –í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤–æ–µ —Ä–µ–∑—é–º–µ —Ä–∞–∑–±–∏–µ–Ω–∏–π.

    Args:
        splits: –†–µ–∑—É–ª—å—Ç–∞—Ç create_splits()
    """
    metadata = splits['metadata']

    print("=" * 80)
    print("–†–ê–ó–ë–ò–ï–ù–ò–ï –î–ê–ù–ù–´–• COVID19_1110")
    print("=" * 80)

    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  –í—Å–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {metadata['total_samples']}")
    print(f"  Random seed: {metadata['random_state']}")

    overall = metadata['distribution']['overall']
    print(f"\n  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤:")
    print(f"    –ù–æ—Ä–º–∞ (CT-0):       {overall['normal']:4d} ({overall['normal_ratio']})")
    print(f"    –ü–∞—Ç–æ–ª–æ–≥–∏—è (CT-1-4): {overall['pathology']:4d} ({overall['pathology_ratio']})")

    print(f"\nüî¨ Hold-out set ({metadata['holdout_ratio']:.0%}):")
    holdout = metadata['distribution']['holdout']
    print(f"  –†–∞–∑–º–µ—Ä: {metadata['holdout_size']} –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    print(f"    –ù–æ—Ä–º–∞:      {holdout['normal']:4d} ({holdout['normal_ratio']})")
    print(f"    –ü–∞—Ç–æ–ª–æ–≥–∏—è:  {holdout['pathology']:4d} ({holdout['pathology_ratio']})")

    print(f"\nüîÑ –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è ({metadata['n_folds']} —Ñ–æ–ª–¥–æ–≤):")
    cv_total = metadata['distribution']['cv_total']
    print(f"  –í—Å–µ–≥–æ –¥–ª—è CV: {metadata['cv_size']} –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")
    print(f"    –ù–æ—Ä–º–∞:      {cv_total['normal']:4d} ({cv_total['normal_ratio']})")
    print(f"    –ü–∞—Ç–æ–ª–æ–≥–∏—è:  {cv_total['pathology']:4d} ({cv_total['pathology_ratio']})")

    print(f"\n  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–æ–ª–¥–∞–º:")
    print(f"  {'Fold':>6s} | {'Train Total':>12s} | {'Train N/P':>15s} | {'Val Total':>10s} | {'Val N/P':>15s}")
    print(f"  {'-'*6}-|-{'-'*12}-|-{'-'*15}-|-{'-'*10}-|-{'-'*15}")

    for fold_dist in metadata['cv_folds_distribution']:
        fold = fold_dist['fold']
        train = fold_dist['train']
        val = fold_dist['val']

        print(f"  {fold:6d} | {train['total']:12d} | "
              f"{train['normal']:3d}/{train['pathology']:3d} "
              f"({train['normal_ratio']:>5s}/{train['pathology_ratio']:>5s}) | "
              f"{val['total']:10d} | "
              f"{val['normal']:3d}/{val['pathology']:3d} "
              f"({val['normal_ratio']:>5s}/{val['pathology_ratio']:>5s})")

    print("\n" + "=" * 80)


def verify_splits_integrity(splits: Dict) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏–π.

    –ü—Ä–æ–≤–µ—Ä–∫–∏:
    - –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É hold-out –∏ CV
    - –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É train/val –≤–Ω—É—Ç—Ä–∏ —Ñ–æ–ª–¥–æ–≤
    - –°—É–º–º–∞ –≤—Å–µ—Ö —Å—ç–º–ø–ª–æ–≤ = –∏—Å—Ö–æ–¥–Ω–æ–º—É –¥–∞—Ç–∞—Å–µ—Ç—É
    - –í—Å–µ file_paths —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞–∂–¥–æ–≥–æ split

    Args:
        splits: –†–µ–∑—É–ª—å—Ç–∞—Ç create_splits()

    Returns:
        True –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    """
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–π...")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –∏–∑ hold-out
    holdout_paths = set(splits['holdout']['file_paths'])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –∏–∑ CV
    all_cv_paths = set()
    for fold in splits['cv_folds']:
        train_paths = set(fold['train']['file_paths'])
        val_paths = set(fold['val']['file_paths'])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π train/val –≤–Ω—É—Ç—Ä–∏ —Ñ–æ–ª–¥–∞
        intersection = train_paths & val_paths
        if intersection:
            print(f"  ‚ùå Fold {fold['fold']}: –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è train/val ({len(intersection)} —Ñ–∞–π–ª–æ–≤)")
            return False

        all_cv_paths.update(train_paths)
        all_cv_paths.update(val_paths)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π hold-out –∏ CV
    intersection = holdout_paths & all_cv_paths
    if intersection:
        print(f"  ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É hold-out –∏ CV ({len(intersection)} —Ñ–∞–π–ª–æ–≤)")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É–º–º–∞ = total
    total_expected = splits['metadata']['total_samples']
    total_actual = len(holdout_paths) + len(all_cv_paths)

    if total_actual != total_expected:
        print(f"  ‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: –æ–∂–∏–¥–∞–ª–æ—Å—å {total_expected}, –ø–æ–ª—É—á–µ–Ω–æ {total_actual}")
        return False

    print("  ‚úÖ –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É hold-out –∏ CV")
    print("  ‚úÖ –ù–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –º–µ–∂–¥—É train/val –≤–Ω—É—Ç—Ä–∏ —Ñ–æ–ª–¥–æ–≤")
    print("  ‚úÖ –°—É–º–º–∞ –≤—Å–µ—Ö —Å—ç–º–ø–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º")
    print("  ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")

    return True