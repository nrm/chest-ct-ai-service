"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π –º–µ–∂–¥—É —Å–ª–∞–π—Å–∞–º–∏
"""

import numpy as np
from pathlib import Path
from typing import Dict, List, Tuple, Optional
import scipy.ndimage
from scipy.interpolate import interp1d
import time

def interpolate_masks_between_slices(sparse_masks: Dict[str, np.ndarray], 
                                   target_shape: Tuple[int, int, int],
                                   slice_indices: List[int],
                                   method: str = 'linear') -> Dict[str, np.ndarray]:
    """
    –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç –º–∞—Å–∫–∏ –º–µ–∂–¥—É —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–ª–∞–π—Å–∞–º–∏
    
    Args:
        sparse_masks: –°–ª–æ–≤–∞—Ä—å —Å –º–∞—Å–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        target_shape: –¶–µ–ª–µ–≤–∞—è —Ñ–æ—Ä–º–∞ 3D –º–∞—Å—Å–∏–≤–∞ (z, y, x)
        slice_indices: –ò–Ω–¥–µ–∫—Å—ã —Å–ª–∞–π—Å–æ–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –º–∞—Å–∫–∏
        method: –ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ ('linear', 'nearest', 'cubic')
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–Ω—ã–º–∏ 3D –º–∞—Å–∫–∞–º–∏
    """
    print(f"üîÑ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –º–∞—Å–æ–∫ –º–µ–∂–¥—É {len(slice_indices)} —Å–ª–∞–π—Å–∞–º–∏...")
    
    full_masks = {}
    z_target = target_shape[0]
    
    for comp_name, comp_masks in sparse_masks.items():
        if comp_masks is None or len(comp_masks) == 0:
            full_masks[comp_name] = np.zeros(target_shape, dtype=np.uint8)
            continue
        
        print(f"   –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è {comp_name}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é –º–∞—Å–∫—É
        full_mask = np.zeros(target_shape, dtype=np.uint8)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–ª–∞–π—Å—ã
        for i, slice_idx in enumerate(slice_indices):
            if i < len(comp_masks):
                full_mask[slice_idx] = comp_masks[i]
        
        # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É —Å–ª–∞–π—Å–∞–º–∏
        for i in range(len(slice_indices) - 1):
            start_idx = slice_indices[i]
            end_idx = slice_indices[i + 1]
            start_mask = comp_masks[i]
            end_mask = comp_masks[i + 1]
            
            # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–æ–∏—Ö —Å–ª–∞–π—Å–∞—Ö
            if start_mask.any() or end_mask.any():
                interpolated = interpolate_between_two_slices(
                    start_mask, end_mask, 
                    start_idx, end_idx, 
                    method=method
                )
                
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–ª–∞–π—Å—ã
                for j in range(start_idx + 1, end_idx):
                    if j < z_target:
                        full_mask[j] = interpolated[j - start_idx - 1]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–∞–π—Å–∞
        if slice_indices[0] > 0:
            # –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–∞–π—Å –≤ –Ω–∞—á–∞–ª–æ
            first_mask = comp_masks[0]
            for i in range(slice_indices[0]):
                full_mask[i] = first_mask
        
        if slice_indices[-1] < z_target - 1:
            # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–∞–π—Å –≤ –∫–æ–Ω–µ—Ü
            last_mask = comp_masks[-1]
            for i in range(slice_indices[-1] + 1, z_target):
                full_mask[i] = last_mask
        
        full_masks[comp_name] = full_mask
    
    print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return full_masks

def interpolate_between_two_slices(start_mask: np.ndarray, 
                                 end_mask: np.ndarray,
                                 start_idx: int, 
                                 end_idx: int,
                                 method: str = 'linear') -> List[np.ndarray]:
    """
    –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç –º–∞—Å–∫–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Å–ª–∞–π—Å–∞–º–∏
    """
    num_slices = end_idx - start_idx - 1
    if num_slices <= 0:
        return []
    
    interpolated = []
    
    if method == 'nearest':
        # –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–ª–∞–π—Å–∞
        for i in range(num_slices):
            if i < num_slices // 2:
                interpolated.append(start_mask.copy())
            else:
                interpolated.append(end_mask.copy())
    
    elif method == 'linear':
        # –õ–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        for i in range(num_slices):
            alpha = (i + 1) / (num_slices + 1)
            interpolated_mask = (start_mask * (1 - alpha) + end_mask * alpha).astype(np.uint8)
            interpolated.append(interpolated_mask)
    
    elif method == 'morphological':
        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        for i in range(num_slices):
            alpha = (i + 1) / (num_slices + 1)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –º–∞—Å–∫–∏
            combined = np.logical_or(start_mask, end_mask).astype(np.uint8)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
            if combined.any():
                from skimage.morphology import binary_closing, binary_opening
                combined = binary_closing(combined, footprint=np.ones((3, 3)))
                combined = binary_opening(combined, footprint=np.ones((2, 2)))
            
            interpolated.append(combined)
    
    return interpolated

def create_sparse_segmentation(volume: np.ndarray, 
                             projector,
                             args,
                             slice_step: int = 5,
                             interpolation_method: str = 'morphological') -> Dict[str, np.ndarray]:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ N-–≥–æ —Å–ª–∞–π—Å–∞, –∑–∞—Ç–µ–º –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç
    
    Args:
        volume: 3D –º–∞—Å—Å–∏–≤ CT –¥–∞–Ω–Ω—ã—Ö
        projector: –ü—Ä–æ–µ–∫—Ç–æ—Ä –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        slice_step: –®–∞–≥ –º–µ–∂–¥—É —Å–ª–∞–π—Å–∞–º–∏ (–∫–∞–∂–¥—ã–π N-–π —Å–ª–∞–π—Å)
        interpolation_method: –ú–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–Ω—ã–º–∏ 3D –º–∞—Å–∫–∞–º–∏
    """
    print(f"üéØ Sparse segmentation: –∫–∞–∂–¥—ã–π {slice_step}-–π —Å–ª–∞–π—Å")
    
    z, y, x = volume.shape
    slice_indices = list(range(0, z, slice_step))
    
    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–∞–π—Å –Ω–µ –≤–∫–ª—é—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if slice_indices[-1] != z - 1:
        slice_indices.append(z - 1)
    
    print(f"   –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å–∫–∏ –¥–ª—è {len(slice_indices)} —Å–ª–∞–π—Å–æ–≤ –∏–∑ {z}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–∞–π—Å–æ–≤
    sparse_masks = {}
    start_time = time.time()
    
    for comp_name in ['body', 'lungs', 'bone', 'airways', 'soft']:
        sparse_masks[comp_name] = []
    
    for i, slice_idx in enumerate(slice_indices):
        print(f"   –°–ª–∞–π—Å {slice_idx}/{z-1} ({i+1}/{len(slice_indices)})")
        
        # –°–æ–∑–¥–∞–µ–º 2D —Å–ª–∞–π—Å
        slice_2d = volume[slice_idx]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Å–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–∞–π—Å–∞
        slice_masks = calculate_slice_masks(slice_2d, projector, args, slice_idx)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫–∏
        for comp_name, mask in slice_masks.items():
            sparse_masks[comp_name].append(mask)
    
    calculation_time = time.time() - start_time
    print(f"‚ö° –†–∞—Å—á–µ—Ç {len(slice_indices)} —Å–ª–∞–π—Å–æ–≤: {calculation_time:.2f}s")
    
    # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É —Å–ª–∞–π—Å–∞–º–∏
    interpolation_start = time.time()
    full_masks = interpolate_masks_between_slices(
        sparse_masks, volume.shape, slice_indices, interpolation_method
    )
    interpolation_time = time.time() - interpolation_start
    print(f"üîÑ –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è: {interpolation_time:.2f}s")
    
    total_time = calculation_time + interpolation_time
    speedup = (z * calculation_time / len(slice_indices)) / total_time
    print(f"üöÄ –û–±—â–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x (–≤–º–µ—Å—Ç–æ {z} —Å–ª–∞–π—Å–æ–≤ - {len(slice_indices)})")
    
    return full_masks

def calculate_slice_masks(slice_2d: np.ndarray, 
                         projector, 
                         args, 
                         slice_idx: int) -> Dict[str, np.ndarray]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Å–∫–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ 2D —Å–ª–∞–π—Å–∞
    """
    masks = {}
    
    try:
        # –°–æ–∑–¥–∞–µ–º 3D –º–∞—Å—Å–∏–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–∞–π—Å–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        volume_3d = slice_2d[np.newaxis, :, :]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        from configurable_dual_body_sementation import (
            create_big_body_mask, create_small_body_mask,
            clean_lung_artifacts_configurable, clean_airways_configurable
        )
        
        # –¢–µ–ª–æ
        big_body = create_big_body_mask(volume_3d)
        small_body = create_small_body_mask(volume_3d)
        masks['body'] = small_body[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 2D —Å–ª–∞–π—Å
        
        # –õ–µ–≥–∫–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        if hasattr(projector, '_compute_lung_mask_enhanced'):
            lungs_big = projector._compute_lung_mask_enhanced(volume_3d, big_body)
            lungs_limited = np.logical_and(lungs_big, small_body).astype(np.uint8)
            lungs_final = clean_lung_artifacts_configurable(
                lungs_limited[0], volume_3d[0], 
                body_mask=small_body[0], thorax=small_body[0]
            )
            masks['lungs'] = lungs_final
        else:
            masks['lungs'] = np.zeros_like(slice_2d, dtype=np.uint8)
        
        # –ö–æ—Å—Ç–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if args.separate_bones and hasattr(projector, '_compute_bone_mask_enhanced'):
            bones_big = projector._compute_bone_mask_enhanced(volume_3d, big_body)
            masks['bone'] = bones_big[0]
        else:
            masks['bone'] = np.zeros_like(slice_2d, dtype=np.uint8)
        
        # –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        if hasattr(projector, '_compute_airways_mask'):
            airways_big = projector._compute_airways_mask(volume_3d, lungs_big, big_body)
            airways_final = clean_airways_configurable(airways_big[0], lungs_final)
            masks['airways'] = airways_final
        else:
            masks['airways'] = np.zeros_like(slice_2d, dtype=np.uint8)
        
        # –ú—è–≥–∫–∏–µ —Ç–∫–∞–Ω–∏
        soft_mask = small_body[0].copy()
        if masks['lungs'].any():
            soft_mask[masks['lungs'] > 0] = 0
        if masks['bone'].any():
            soft_mask[masks['bone'] > 0] = 0
        if masks['airways'].any():
            soft_mask[masks['airways'] > 0] = 0
        masks['soft'] = soft_mask.astype(np.uint8)
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Å–æ–∫ –¥–ª—è —Å–ª–∞–π—Å–∞ {slice_idx}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –º–∞—Å–∫–∏
        for comp_name in ['body', 'lungs', 'bone', 'airways', 'soft']:
            masks[comp_name] = np.zeros_like(slice_2d, dtype=np.uint8)
    
    return masks

def adaptive_slice_selection(volume: np.ndarray, 
                           max_slices: int = 20,
                           min_step: int = 2) -> List[int]:
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª–∞–π—Å—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–±—ä–µ–º–µ
    """
    z, y, x = volume.shape
    
    if z <= max_slices:
        return list(range(z))
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ Z-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    gradient = np.abs(np.diff(volume, axis=0))
    gradient_sum = np.sum(gradient, axis=(1, 2))
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    from scipy.signal import find_peaks
    peaks, _ = find_peaks(gradient_sum, distance=min_step)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏ –∫–æ–Ω–µ—á–Ω—ã–π —Å–ª–∞–π—Å—ã
    selected_indices = [0]
    selected_indices.extend(peaks.tolist())
    if z - 1 not in selected_indices:
        selected_indices.append(z - 1)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π—Å–æ–≤
    if len(selected_indices) > max_slices:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª–∞–π—Å—ã —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        peak_values = gradient_sum[peaks]
        top_peaks = np.argsort(peak_values)[-max_slices+2:]  # +2 –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –∫–æ–Ω–µ—á–Ω–æ–≥–æ
        selected_indices = [0] + peaks[top_peaks].tolist() + [z - 1]
        selected_indices = sorted(list(set(selected_indices)))
    
    return selected_indices
