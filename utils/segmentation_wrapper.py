"""
Wrapper –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏–∑ segment_and_viz_2
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç configurable_dual_body_sementation.py –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ body –∏ lungs
"""
import sys
import json
import numpy as np
from pathlib import Path
from typing import Dict, Optional, Tuple
import tempfile
import shutil
import argparse
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
SEGMENT_DIR = Path(__file__).parent.parent / "segment_and_viz_2"
sys.path.insert(0, str(SEGMENT_DIR))
print(f"üìÅ Added segmentation path: {SEGMENT_DIR}")
print(f"   Exists: {SEGMENT_DIR.exists()}")

try:
    from configurable_dual_body_sementation import CTVisualizer
    from optimized_gpu_segmentation import create_optimized_gpu_masks, GPU_AVAILABLE
    SEGMENTATION_AVAILABLE = True
    print(f"üî• –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if GPU_AVAILABLE else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
except ImportError as e:
    print(f"‚ö†Ô∏è  Segmentation not available: {e}")
    SEGMENTATION_AVAILABLE = False
    GPU_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç ct_lung –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
try:
    from ct_lung_integration import create_enhanced_bones_mask, get_ct_lung_status
    CT_LUNG_INTEGRATION_AVAILABLE = True
    ct_lung_status = get_ct_lung_status()
    print(f"ü¶¥ ct_lung.py –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'–¥–æ—Å—Ç—É–ø–Ω–∞' if ct_lung_status['available'] else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
except ImportError as e:
    print(f"‚ö†Ô∏è  ct_lung integration not available: {e}")
    CT_LUNG_INTEGRATION_AVAILABLE = False


class SegmentationProcessor:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è DICOM –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, task_id: str, dicom_dir: Path, output_dir: Path, include_bones: bool = False):
        self.task_id = task_id
        self.dicom_dir = dicom_dir
        self.output_dir = output_dir
        self.include_bones = include_bones
        self.masks_dir = output_dir / "masks"
        self.masks_dir.mkdir(exist_ok=True, parents=True)
        self.masks_metadata = {} # Initialize masks_metadata here
        print(f"     SegmentationProcessor initialized with dicom_dir: {self.dicom_dir}")
        
    def process(self) -> Optional[Dict]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç GPU-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–∞—Å–æ–∫"""
        if not SEGMENTATION_AVAILABLE:
            print(f"‚ö†Ô∏è  Segmentation skipped for task {self.task_id}: dependencies not available")
            return None
            
        try:
            print(f"üß† Starting GPU segmentation for task {self.task_id}...")
            print(f"   Include bones: {self.include_bones}")
            print(f"   GPU available: {GPU_AVAILABLE}")
            
            # –°–æ–∑–¥–∞—ë–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            visualizer = CTVisualizer(self.dicom_dir, self.output_dir)
            visualizer.load_data()
            volume = visualizer.volume
            
            if volume is None:
                print(f"‚ùå Failed to load volume for task {self.task_id}")
                return None
            
            print(f"‚úÖ Loaded volume: shape={volume.shape} ({volume.nbytes / 1024**3:.2f} GB)")
            
            # –°–æ–∑–¥–∞—ë–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            class Args:
                def __init__(self, separate_bones=False, divide_bones=False):
                    self.separate_bones = separate_bones
                    self.divide_bones = divide_bones
            
            args = Args(separate_bones=self.include_bones, divide_bones=False)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–º–æ–≤
            z, y, x = volume.shape
            total_slices = z
            
            print(f"üî• –ü–æ–ª–Ω–∞—è GPU —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è {total_slices} —Å–ª–∞–π—Å–æ–≤...")
            import time
            start_time = time.time()
            masks = create_optimized_gpu_masks(volume, visualizer.projector, args, self.task_id, use_gpu=GPU_AVAILABLE)
            
            segmentation_time = time.time() - start_time
            print(f"‚ö° GPU segmentation time: {segmentation_time:.2f} seconds")
            
            # –í–°–ï–ì–î–ê —É–ª—É—á—à–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∫–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é ct_lung.py –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            if CT_LUNG_INTEGRATION_AVAILABLE:
                print("ü¶¥ –£–ª—É—á—à–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ—Å—Ç–µ–π —Å ct_lung.py (–≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏)...")
                try:
                    # –ü–æ–ª—É—á–∞–µ–º spacing –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    spacing_zyx = visualizer.metadata.get('spacing', (1.0, 1.0, 1.0))
                    if len(spacing_zyx) == 3:
                        spacing_zyx = tuple(spacing_zyx)
                    else:
                        spacing_zyx = (1.0, 1.0, 1.0)
                    
                    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –º–∞—Å–∫—É –∫–æ—Å—Ç–µ–π (–≤—Å–µ–≥–¥–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç include_bones)
                    enhanced_bones = create_enhanced_bones_mask(
                        volume, spacing_zyx, masks.get('body', np.ones_like(volume, dtype=bool)), 
                        masks.get('bone')  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None, –µ—Å–ª–∏ include_bones=False
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å–∫—É –∫–æ—Å—Ç–µ–π
                    masks['bone'] = enhanced_bones
                    print(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∞—Å–∫–∞ –∫–æ—Å—Ç–µ–π: {enhanced_bones.sum()} –≤–æ–∫—Å–µ–ª–µ–π")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ—Å—Ç–µ–π: {e}")
            else:
                print("‚ö†Ô∏è ct_lung.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫–∏
            masks_metadata = self._save_masks(masks, volume, visualizer.metadata)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU –∏ –º–µ—Ç–æ–¥–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            masks_metadata["gpu_info"] = {
                "gpu_used": GPU_AVAILABLE,
                "segmentation_time": segmentation_time,
                "volume_size_gb": volume.nbytes / 1024**3,
                "segmentation_method": "full",
                "total_slices": total_slices,
                "slice_step": 1,
                "calculated_slices": total_slices,
                "ct_lung_enhanced": CT_LUNG_INTEGRATION_AVAILABLE
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
            self.masks_metadata = masks_metadata
            
            # –°–æ–∑–¥–∞—ë–º preview —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –º–∞—Å–æ–∫
            self._create_overlay_preview(volume, masks, visualizer.metadata)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–∞–π—Å—ã DICOM
            self._generate_mask_slices(volume, masks, visualizer.metadata)
            
            print(f"‚úÖ GPU segmentation completed for task {self.task_id}")
            return masks_metadata
            
        except Exception as e:
            print(f"‚ùå GPU segmentation failed for task {self.task_id}: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def _save_masks(self, masks: Dict[str, np.ndarray], volume: np.ndarray, 
                    metadata: Dict) -> Dict:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è 2D –∏ 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        print(f"     Saving masks: {list(masks.keys())}")
        masks_metadata = {
            "task_id": self.task_id,
            "volume_shape": list(volume.shape),
            "spacing": [float(x) for x in metadata.get('spacing', [1.0, 1.0, 1.0])],
            "components": {}
        }
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –µ—Å—Ç—å –≤ masks)
        components = list(masks.keys())
        print(f"     Components to process: {components}")
        
        for comp_name in components:
            mask = masks[comp_name]
            if mask is None:
                print(f"     Skipping {comp_name}: mask is None")
                continue
            
            voxel_count = mask.sum() if hasattr(mask, 'sum') else 0
            print(f"     Processing {comp_name}: shape={mask.shape}, voxels={voxel_count}")
            
            if voxel_count == 0:
                print(f"     Warning: {comp_name} mask is empty, but saving metadata anyway")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–∞–∂–µ –¥–ª—è –ø—É—Å—Ç—ã—Ö –º–∞—Å–æ–∫
                masks_metadata["components"][comp_name] = {
                    "mask_3d_file": None,
                    "slices_dir": None,
                    "slice_indices": [],
                    "voxel_count": 0,
                    "volume_ml": 0.0
                }
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ numpy array –¥–ª—è 3D –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            mask_3d_path = self.masks_dir / f"{comp_name}_3d.npy"
            np.save(str(mask_3d_path), mask.astype(np.uint8))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–µ–∑—ã –¥–ª—è 2D overlay
            slices_dir = self.masks_dir / comp_name
            slices_dir.mkdir(exist_ok=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ä–µ–∑ (—É–±—Ä–∞–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é "–∫–∞–∂–¥—ã–π 5-–π")
            slice_indices = []
            for z in range(mask.shape[0]):
                if mask[z].any():
                    slice_path = slices_dir / f"slice_{z:04d}.png"
                    self._save_mask_slice_as_png(mask[z], slice_path)
                    slice_indices.append(z)
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            masks_metadata["components"][comp_name] = {
                "mask_3d_file": str(mask_3d_path.relative_to(self.output_dir)),
                "slices_dir": str(slices_dir.relative_to(self.output_dir)),
                "slice_indices": slice_indices,
                "voxel_count": int(mask.sum()),
                "volume_ml": float(mask.sum() * np.prod(metadata.get('spacing', [1.0, 1.0, 1.0])) / 1000.0)
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_path = self.masks_dir / "masks_metadata.json"
        with open(metadata_path, 'w') as f:
            json.dump(masks_metadata, f, indent=2)
        
        return masks_metadata
    
    def _save_mask_slice_as_png(self, mask_slice: np.ndarray, output_path: Path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ä–µ–∑ –º–∞—Å–∫–∏ –∫–∞–∫ PNG"""
        from PIL import Image
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ uint8 (255 –¥–ª—è –º–∞—Å–∫–∏, 0 –¥–ª—è —Ñ–æ–Ω–∞)
        mask_img = (mask_slice.astype(np.uint8) * 255)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        img = Image.fromarray(mask_img, mode='L')
        img.save(str(output_path))
    
    def _create_overlay_preview(self, volume: np.ndarray, masks: Dict[str, np.ndarray], 
                                metadata: Dict):
        """–°–æ–∑–¥–∞—ë—Ç preview —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –º–∞—Å–æ–∫ –Ω–∞ —Å—Ä–µ–∑—ã"""
        try:
            import matplotlib
            matplotlib.use('Agg')
            import matplotlib.pyplot as plt
            from matplotlib.colors import ListedColormap, BoundaryNorm
            
            # –ë–µ—Ä—ë–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–∫—Å–∏–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑
            mid_z = volume.shape[0] // 2
            img_slice = volume[mid_z]
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—É—é –º–∞—Å–∫—É —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            composite_mask = np.zeros_like(img_slice, dtype=np.uint8)
            
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ ID —Ä–∞–∑–Ω—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
            component_ids = {
                "body": 1,
                "lungs": 2,
                "bone": 3,
                "spine": 4,
                "ribs": 5,
                "soft": 6
            }
            
            # –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫—Ä–æ–º–µ body
            for comp_name, comp_id in component_ids.items():
                if comp_name != "body" and comp_name in masks and masks[comp_name] is not None:
                    mask = masks[comp_name][mid_z]
                    composite_mask[mask > 0] = comp_id
            
            # –ó–∞—Ç–µ–º –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º body —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if "body" in masks and masks["body"] is not None:
                body_mask = masks["body"][mid_z]
                # body –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–∞–º, –≥–¥–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                body_only = body_mask & (composite_mask == 0)
                composite_mask[body_only > 0] = component_ids["body"]
            
            # –°–æ–∑–¥–∞—ë–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É
            colors = [
                (0, 0, 0, 0),          # 0: background (transparent)
                (0.7, 0.7, 0.7, 0.3),  # 1: body (gray)
                (0.1, 0.7, 1.0, 0.4),  # 2: lungs (cyan)
                (1.0, 1.0, 0.2, 0.5),  # 3: bone (yellow)
                (1.0, 0.8, 0.4, 0.5),  # 4: spine (light yellow)
                (1.0, 1.0, 0.6, 0.4),  # 5: ribs (lighter yellow)
                (0.7, 0.3, 1.0, 0.3),  # 6: soft tissue (purple)
            ]
            cmap = ListedColormap(colors)
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
            fig, ax = plt.subplots(1, 1, figsize=(10, 10))
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º CT —Å—Ä–µ–∑
            ax.imshow(np.clip(img_slice, -1000, 500), cmap='gray', 
                     vmin=-1000, vmax=500, aspect='auto')
            
            # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–æ–∫
            ax.imshow(composite_mask, cmap=cmap, interpolation='nearest', 
                     vmin=0, vmax=len(colors)-1, aspect='auto')
            
            ax.set_title(f'Segmentation Preview - Slice {mid_z}/{volume.shape[0]}')
            ax.axis('off')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
            legend_elements = []
            for comp_name, comp_id in component_ids.items():
                if comp_name in masks and masks[comp_name] is not None:
                    color = colors[comp_id]
                    legend_elements.append(
                        plt.Line2D([0], [0], marker='o', color='w', 
                                 markerfacecolor=color[:3], markersize=10, 
                                 label=comp_name.replace('_', ' ').title())
                    )
            
            if legend_elements:
                ax.legend(handles=legend_elements, loc='upper right')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            preview_path = self.output_dir / "segmentation_preview.png"
            fig.tight_layout()
            fig.savefig(str(preview_path), dpi=150, bbox_inches='tight')
            plt.close(fig)
            
            print(f"‚úÖ Saved segmentation preview: {preview_path}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Failed to create overlay preview: {e}")
    
    def _generate_mask_slices(self, volume: np.ndarray, masks: Dict[str, np.ndarray], metadata: Dict):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PNG —Å–ª–∞–π—Å—ã DICOM —Å –Ω–∞–ª–æ–∂–µ–Ω–∏–µ–º –º–∞—Å–æ–∫"""
        try:
            from utils.mask_visualization import generate_mask_slices_for_task
            from utils.dicom_to_image import get_dicom_files_sorted
            import SimpleITK as sitk
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ DICOM —Ñ–∞–π–ª–æ–≤ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ volume
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SimpleITK –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–∫–∞–∫ –≤ CTVolumeLoader)
            try:
                reader = sitk.ImageSeriesReader()
                series_ids = list(reader.GetGDCMSeriesIDs(str(self.dicom_dir)))
                if series_ids:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é (–∫–∞–∫ –≤ CTVolumeLoader)
                    dicom_files = [Path(f) for f in reader.GetGDCMSeriesFileNames(str(self.dicom_dir), series_ids[0])]
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ—Ä—è–¥–æ–∫ SimpleITK: {len(dicom_files)} —Ñ–∞–π–ª–æ–≤")
                else:
                    dicom_files = get_dicom_files_sorted(self.dicom_dir)
                    print(f"‚ö†Ô∏è SimpleITK —Å–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω InstanceNumber")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SimpleITK —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {e}, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω InstanceNumber")
                dicom_files = get_dicom_files_sorted(self.dicom_dir)
            
            if not dicom_files:
                print(f"‚ö†Ô∏è  No DICOM files found in {self.dicom_dir}")
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–ª–∞–π—Å–æ–≤
            slices_dir = self.output_dir / "masks" / "mask_slices"
            slices_dir.mkdir(exist_ok=True, parents=True)
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å–∫–∞—Ö
            print(f"üîç –û—Ç–ª–∞–¥–∫–∞ –º–∞—Å–æ–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π—Å–æ–≤:")
            for name, mask in masks.items():
                if hasattr(mask, 'shape'):
                    print(f"  {name}: shape={mask.shape}, voxels={mask.sum() if hasattr(mask, 'sum') else 'N/A'}")
                else:
                    print(f"  {name}: type={type(mask)}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–∞–π—Å—ã —Å –º–∞—Å–∫–∞–º–∏ (–∫–∞–∂–¥—ã–π 3-–π)
            generated_slices = generate_mask_slices_for_task(
                self.task_id, dicom_files, masks, slices_dir, slice_step=3
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–∞–π—Å–∞—Ö
            slices_info = {
                "total_dicom_files": len(dicom_files),
                "generated_slices": len(generated_slices),
                "slices_dir": str(slices_dir.relative_to(self.output_dir)),
                "slices": generated_slices
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            slices_info["segmentation_method"] = "full"
            slices_info["slice_step"] = 3
            slices_info["calculated_slices"] = len(generated_slices)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–∞–π—Å–∞—Ö –≤ —Ñ–∞–π–ª
            slices_info_path = slices_dir / "slices_info.json"
            with open(slices_info_path, 'w') as f:
                json.dump(slices_info, f, indent=2)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–∞–π—Å–∞—Ö –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            if hasattr(self, 'masks_metadata'):
                self.masks_metadata["mask_slices"] = slices_info
                print(f"üìä Added mask_slices info to metadata: {len(generated_slices)} slices")
            
            print(f"‚úÖ Generated {len(generated_slices)} mask slices")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Failed to generate mask slices: {e}")


def run_segmentation(task_id: str, dicom_dir: Path, output_dir: Path, include_bones: bool = False) -> Optional[Dict]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏
        dicom_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å DICOM —Ñ–∞–π–ª–∞–º–∏
        output_dir: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        include_bones: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∫–æ—Å—Ç–µ–π (–º–µ–¥–ª–µ–Ω–Ω–æ)
    
    Returns:
        –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–∞—Å–æ–∫ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    processor = SegmentationProcessor(task_id, dicom_dir, output_dir, include_bones)
    return processor.process()