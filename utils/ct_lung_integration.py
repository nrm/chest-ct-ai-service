"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ct_lung.py —Å–µ–≥–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–º –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ—Å—Ç–µ–π
"""

import sys
import numpy as np
from pathlib import Path
from typing import Dict, Tuple, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ ct_lung.py
CT_LUNG_PATH = Path(__file__).parent.parent / "segment_and_viz_1"
sys.path.insert(0, str(CT_LUNG_PATH))

try:
    from ct_lung import segment_bones, _safe_binary_opening, _ball_structure, _voxel_volume_mm3, _remove_small, _keep_largest
    CT_LUNG_AVAILABLE = True
    print("‚úÖ ct_lung.py —Å–µ–≥–º–µ–Ω—Ç–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
except ImportError as e:
    CT_LUNG_AVAILABLE = False
    print(f"‚ö†Ô∏è ct_lung.py —Å–µ–≥–º–µ–Ω—Ç–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

def segment_bones_with_ct_lung(volume: np.ndarray, spacing_zyx: Tuple[float, float, float], body_mask: np.ndarray) -> Optional[np.ndarray]:
    """
    –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ct_lung.py
    
    Args:
        volume: 3D –º–∞—Å—Å–∏–≤ HU –∑–Ω–∞—á–µ–Ω–∏–π
        spacing_zyx: –†–∞–∑–º–µ—Ä—ã –≤–æ–∫—Å–µ–ª–µ–π (z, y, x)
        body_mask: –ú–∞—Å–∫–∞ —Ç–µ–ª–∞
        
    Returns:
        –ú–∞—Å–∫–∞ –∫–æ—Å—Ç–µ–π –∏–ª–∏ None –µ—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    if not CT_LUNG_AVAILABLE:
        print("‚ö†Ô∏è ct_lung.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∫–æ—Å—Ç–µ–π")
        return None
    
    try:
        print("ü¶¥ –ó–∞–ø—É—Å–∫ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ—Å—Ç–µ–π —Å ct_lung.py...")
        print(f"   Volume shape: {volume.shape}")
        print(f"   Spacing: {spacing_zyx}")
        print(f"   Body mask voxels: {body_mask.sum()}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—é –∫–æ—Å—Ç–µ–π
        bones_mask = segment_bones(volume, spacing_zyx, body_mask)
        
        print(f"‚úÖ ct_lung.py —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {bones_mask.sum()} –≤–æ–∫—Å–µ–ª–µ–π")
        return bones_mask
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ—Å—Ç–µ–π —Å ct_lung.py: {e}")
        return None

def create_enhanced_bones_mask(volume: np.ndarray, spacing_zyx: Tuple[float, float, float], 
                              body_mask: np.ndarray, existing_bones_mask: Optional[np.ndarray] = None) -> np.ndarray:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –º–∞—Å–∫—É –∫–æ—Å—Ç–µ–π, –∫–æ–º–±–∏–Ω–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏ ct_lung.py
    
    Args:
        volume: 3D –º–∞—Å—Å–∏–≤ HU –∑–Ω–∞—á–µ–Ω–∏–π
        spacing_zyx: –†–∞–∑–º–µ—Ä—ã –≤–æ–∫—Å–µ–ª–µ–π
        body_mask: –ú–∞—Å–∫–∞ —Ç–µ–ª–∞
        existing_bones_mask: –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–∞—Å–∫–∞ –∫–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–∞—Å–∫–∞ –∫–æ—Å—Ç–µ–π
    """
    # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å–∫—É –∫–æ—Å—Ç–µ–π –æ—Ç ct_lung.py
    ct_lung_bones = segment_bones_with_ct_lung(volume, spacing_zyx, body_mask)
    
    if existing_bones_mask is not None and ct_lung_bones is not None:
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ–±–µ –º–∞—Å–∫–∏
        print("üîÑ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å–æ–∫ –∫–æ—Å—Ç–µ–π...")
        combined_bones = np.logical_or(existing_bones_mask, ct_lung_bones).astype(np.uint8)
        print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–∞—Å–∫–∞: {existing_bones_mask.sum()} –≤–æ–∫—Å–µ–ª–µ–π")
        print(f"   ct_lung –º–∞—Å–∫–∞: {ct_lung_bones.sum()} –≤–æ–∫—Å–µ–ª–µ–π")
        print(f"   –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è: {combined_bones.sum()} –≤–æ–∫—Å–µ–ª–µ–π")
        return combined_bones
    elif ct_lung_bones is not None:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ct_lung.py (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª—É—á–∞–π)
        print("ü¶¥ –ò—Å–ø–æ–ª—å–∑—É–µ–º ct_lung.py –º–∞—Å–∫—É –∫–æ—Å—Ç–µ–π (–æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è)")
        return ct_lung_bones
    elif existing_bones_mask is not None:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é (fallback)
        print("ü¶¥ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–∞—Å–∫—É –∫–æ—Å—Ç–µ–π (fallback)")
        return existing_bones_mask
    else:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–∞—Å–∫—É (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)
        print("‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –º–∞—Å–∫—É –∫–æ—Å—Ç–µ–π (fallback)")
        return np.zeros_like(body_mask, dtype=np.uint8)

def get_ct_lung_status() -> Dict[str, any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ct_lung.py —Å–µ–≥–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
    """
    return {
        "available": CT_LUNG_AVAILABLE,
        "path": str(CT_LUNG_PATH),
        "functions": {
            "segment_bones": "segment_bones" in globals() if CT_LUNG_AVAILABLE else False,
            "helper_functions": all(func in globals() for func in [
                "_safe_binary_opening", "_ball_structure", "_voxel_volume_mm3", 
                "_remove_small", "_keep_largest"
            ]) if CT_LUNG_AVAILABLE else False
        }
    }
