#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å–æ–∫ –Ω–∞ DICOM —Å–ª–∞–π—Å–∞—Ö
"""

import sys
import os
from pathlib import Path
import numpy as np
import tempfile
import shutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

def test_mask_visualization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –º–∞—Å–æ–∫"""
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å–æ–∫...")
    
    try:
        from utils.mask_visualization import (
            create_annotated_slice, create_multi_mask_overlay, 
            apply_window_level, create_comparison_view
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π DICOM —Å–ª–∞–π—Å
        print("   –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ DICOM —Å–ª–∞–π—Å–∞...")
        slice_data = np.random.randn(256, 256).astype(np.float32)
        slice_data = slice_data * 1000 - 1000  # –ò–º–∏—Ç–∏—Ä—É–µ–º HU –∑–Ω–∞—á–µ–Ω–∏—è
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Å–∫–∏
        masks = {
            'lungs': np.zeros((256, 256), dtype=np.uint8),
            'bone': np.zeros((256, 256), dtype=np.uint8),
            'soft': np.zeros((256, 256), dtype=np.uint8)
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–ª–µ–≥–∫–∏–µ" (–Ω–∏–∑–∫–∏–µ HU –∑–Ω–∞—á–µ–Ω–∏—è)
        masks['lungs'][100:150, 80:180] = 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–∫–æ—Å—Ç–∏" (–≤—ã—Å–æ–∫–∏–µ HU –∑–Ω–∞—á–µ–Ω–∏—è)
        masks['bone'][50:200, 50:60] = 1
        masks['bone'][50:200, 190:200] = 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º "–º—è–≥–∫–∏–µ —Ç–∫–∞–Ω–∏"
        masks['soft'][120:140, 100:160] = 1
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π DICOM —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.dcm', delete=False) as tmp_file:
            tmp_dicom_path = Path(tmp_file.name)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π DICOM —Ñ–∞–π–ª
        import pydicom
        from pydicom.dataset import Dataset, FileDataset
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π DICOM dataset
        ds = Dataset()
        ds.SOPClassUID = '1.2.840.10008.5.1.4.1.1.2'  # CT Image Storage
        ds.SOPInstanceUID = '1.2.3.4.5.6.7.8.9'
        ds.StudyInstanceUID = '1.2.3.4.5.6.7.8.9.1'
        ds.SeriesInstanceUID = '1.2.3.4.5.6.7.8.9.2'
        ds.Modality = 'CT'
        ds.PatientName = 'Test^Patient'
        ds.PatientID = 'TEST001'
        ds.StudyDate = '20240101'
        ds.StudyTime = '120000'
        ds.SeriesDate = '20240101'
        ds.SeriesTime = '120000'
        ds.InstanceNumber = 1
        ds.ImagePositionPatient = [0, 0, 0]
        ds.ImageOrientationPatient = [1, 0, 0, 0, 1, 0]
        ds.SliceThickness = 1.0
        ds.PixelSpacing = [1.0, 1.0]
        ds.Rows = 256
        ds.Columns = 256
        ds.BitsAllocated = 16
        ds.BitsStored = 16
        ds.HighBit = 15
        ds.PixelRepresentation = 0
        ds.PhotometricInterpretation = 'MONOCHROME2'
        ds.WindowCenter = 0
        ds.WindowWidth = 400
        ds.RescaleSlope = 1.0
        ds.RescaleIntercept = 0.0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        ds.PixelData = slice_data.astype(np.int16).tobytes()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DICOM —Ñ–∞–π–ª
        ds.save_as(str(tmp_dicom_path))
        
        # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        output_dir = Path("test_mask_output")
        output_dir.mkdir(exist_ok=True)
        
        # –¢–µ—Å—Ç 1: –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–π—Å
        print("   –¢–µ—Å—Ç 1: –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–π—Å...")
        annotated_path = output_dir / "annotated_slice.png"
        success = create_annotated_slice(tmp_dicom_path, masks, 0, annotated_path)
        
        if success:
            print(f"     ‚úÖ –ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–π—Å: {annotated_path}")
        else:
            print("     ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–∞–π—Å–∞")
        
        # –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥
        print("   –¢–µ—Å—Ç 2: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥...")
        comparison_path = output_dir / "comparison_view.png"
        success = create_comparison_view(tmp_dicom_path, masks, 0, comparison_path)
        
        if success:
            print(f"     ‚úÖ –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–∏–¥: {comparison_path}")
        else:
            print("     ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞")
        
        # –¢–µ—Å—Ç 3: –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–æ–∫
        print("   –¢–µ—Å—Ç 3: –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–æ–∫...")
        processed_image = apply_window_level(slice_data, 0, 400)
        overlay_image = create_multi_mask_overlay(processed_image, masks)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ª–æ–∂–µ–Ω–∏–µ
        import matplotlib.pyplot as plt
        plt.figure(figsize=(8, 8))
        plt.imshow(overlay_image)
        plt.title('Mask Overlay Test')
        plt.axis('off')
        overlay_path = output_dir / "mask_overlay.png"
        plt.savefig(overlay_path, dpi=150, bbox_inches='tight')
        plt.close()
        
        print(f"     ‚úÖ –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–æ–∫: {overlay_path}")
        
        # –û—á–∏—Å—Ç–∫–∞
        tmp_dicom_path.unlink()
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_dicom_slice_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª–∞–π—Å–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π—Å–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏...")
    
    try:
        from utils.mask_visualization import generate_mask_slices_for_task
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å DICOM —Ñ–∞–π–ª–∞–º–∏
        with tempfile.TemporaryDirectory() as temp_dir:
            temp_path = Path(temp_dir)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö DICOM —Ñ–∞–π–ª–æ–≤
            dicom_files = []
            for i in range(5):
                dicom_file = temp_path / f"slice_{i:04d}.dcm"
                
                # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π —Å–ª–∞–π—Å
                slice_data = np.random.randn(128, 128).astype(np.float32)
                slice_data = slice_data * 1000 - 1000
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π DICOM —Ñ–∞–π–ª
                import pydicom
                ds = pydicom.Dataset()
                ds.SOPClassUID = '1.2.840.10008.5.1.4.1.1.2'
                ds.SOPInstanceUID = f'1.2.3.4.5.6.7.8.9.{i}'
                ds.Modality = 'CT'
                ds.Rows = 128
                ds.Columns = 128
                ds.BitsAllocated = 16
                ds.BitsStored = 16
                ds.HighBit = 15
                ds.PixelRepresentation = 0
                ds.PhotometricInterpretation = 'MONOCHROME2'
                ds.WindowCenter = 0
                ds.WindowWidth = 400
                ds.PixelData = slice_data.astype(np.int16).tobytes()
                
                ds.save_as(str(dicom_file))
                dicom_files.append(dicom_file)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—Å–∫–∏
            masks = {
                'lungs': np.random.randint(0, 2, (5, 128, 128), dtype=np.uint8),
                'bone': np.random.randint(0, 2, (5, 128, 128), dtype=np.uint8)
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–∞–π—Å—ã
            output_dir = Path("test_slices_output")
            generated_slices = generate_mask_slices_for_task(
                "test_task", dicom_files, masks, output_dir, max_slices=3
            )
            
            print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–ª–∞–π—Å–æ–≤: {len(generated_slices)}")
            for slice_info in generated_slices:
                print(f"     - {slice_info['filename']} (slice {slice_info['slice_index']})")
            
            print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–∞–π—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å–æ–∫ –Ω–∞ DICOM —Å–ª–∞–π—Å–∞—Ö")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–æ–∫
    viz_ok = test_mask_visualization()
    
    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π—Å–æ–≤
    slices_ok = test_dicom_slice_generation()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–æ–∫: {'‚úÖ' if viz_ok else '‚ùå'}")
    print(f"   –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–∞–π—Å–æ–≤: {'‚úÖ' if slices_ok else '‚ùå'}")
    
    if viz_ok and slices_ok:
        print("\nüé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–æ–∫ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π")

if __name__ == "__main__":
    main()
